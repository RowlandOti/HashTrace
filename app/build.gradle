apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId basePackageName
        versionName baseVersionName
        versionCode baseVersionCode
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        multiDexEnabled true
    }
    signingConfigs {
        release {
            def propFile = file('../.signing/signing.properties')
            if (propFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(propFile))

                storeFile = file(props['STORE_FILE'])
                storePassword = props['STORE_PASSWORD']
                keyAlias = props['KEY_ALIAS']
                keyPassword = props['KEY_PASSWORD']
            }
        }
    }

    productFlavors.whenObjectAdded { flavor ->

        def flavorData = rootProject.ext[flavor.name]

        flavor.resValue 'string', resAppName, flavorData.appName
        flavor.resValue 'color', resAppColorName, flavorData.appColor
        // Brand
        flavor.applicationId flavorData.packageName
        flavor.versionName flavorData.versionName
        //Accessed in java code as BuildConfig.IS_PRO_VERSION
        flavor.buildConfigField 'Boolean', fieldIsProVersion, flavorData.isProVersion
        flavor.buildConfigField 'String', fieldTwitterApiKey, flavorData.twitterApiKey
        // Signing
        flavor.signingConfig signingConfigs.release
    }
    productFlavors {
        //Paid Version
        pro {

        }
        //Free Version
        free {

        }
        //Demo Version
        promo {

        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            // Show the logs when debugging
            buildConfigField "Boolean", "IS_DEBUG_MODE", "true"
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Hide all the logs on product release
            buildConfigField "Boolean", "IS_DEBUG_MODE", "false"
        }
    }
}

dependencies {
    // LOCAL BINARY DEPENDENCY

    // MODULE DEPENDENCY
    compile project(':libraries:pullToRefresh')
    compile project(':libraries:design')
    compile project(':libraries:hellochartslibrary')
    compile project(':libraries:swipeMenuListView')
    compile project(':libraries:common')

    compile appDependencies.supportAppCompatV7
    compile appDependencies.supportCardView
    compile appDependencies.supportDesign
    //compile appDependencies.supportRecyclerView

    compile appDependencies.butterKnife
    //compile appDependencies.rxAndroid
    //compile appDependencies.rxJava

    //compile appDependencies.retrofit
    //compile appDependencies.retrofitConverterGson
    compile appDependencies.twitter4j

    //compile appDependencies.activeAndroid

    //compile appDependencies.facebookStetho
    //compile appDependencies.facebookStethoOkhttp
    //compile appDependencies.okHttpLoggingInterceptor
    compile appDependencies.crashlytics

    //compile appDependencies.facebookFresco
    //compile appDependencies.picasso

    //compile appDependencies.wasabeefVersion
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
}

